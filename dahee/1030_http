**1. "HTTP 파이프라인의 개념과 장점을 설명해주세요."**
HTTP 파이프라인은 요청에 대한 응답을 기다리지 않고 다음 요청을 보낼 수 있는 기능입니다. HTTP/1.0에서는 하나의 요청을 보내고 응답을 기다린 후에야 다음 요청을 보낼 수 있었기 때문에 많은 콘텐츠로 구성된 웹사이트 로딩 시 시간이 오래 걸렸습니다. 파이프라인을 통해 여러 요청을 연속적으로 보낼 수 있게 되어 전체적인 성능 향상을 이끌어낼 수 있습니다.

**2. "HTTP/2의 멀티플렉싱이 HTTP/1.1 파이프라인과 비교하여 가지는 장점은 무엇인가요?"**
HTTP/2의 멀티플렉싱은 하나의 TCP 연결 내에서 스트림이라는 가상 채널을 만들어 요청과 응답을 독립적으로 주고받을 수 있게 합니다. 이는 HTTP/1.1 파이프라인의 주요 문제점이었던 Head of Line 블로킹을 해결했다는 점에서 큰 의미가 있습니다. HOL 블로킹은 앞선 요청의 처리가 지연될 경우 뒤따르는 모든 요청이 함께 지연되는 성능 저하 현상을 말합니다.

**3. "HPACK이 HTTP/2에서 도입된 이유와 그 작동 방식에 대해 설명해주세요."**
HPACK은 HTTP/2에서 도입된 헤더 압축 기술로, 네트워크 대역폭을 효율적으로 사용하기 위해 도입되었습니다. 자주 사용되는 HTTP 헤더를 미리 정의된 숫자로 치환하는 정적 테이블과, 한 번 전송된 헤더를 동적으로 숫자로 치환하는 동적 테이블을 활용하여 헤더의 전송량을 획기적으로 줄일 수 있습니다.

**4. "풀 타입 프로토콜과 푸시 타입 프로토콜의 차이점과 각각의 사용 사례를 설명해주세요."**
풀 타입 프로토콜은 HTTP/1.1까지 사용된 방식으로, 하나의 요청에 대해 하나의 응답만을 받을 수 있습니다. 반면 푸시 타입 프로토콜은 HTTP/2부터 도입된 방식으로, 하나의 요청에 대해 서버가 여러 응답을 보낼 수 있습니다. 이는 웹 페이지 로딩 시 필요한 리소스들을 클라이언트의 추가 요청 없이 서버가 미리 전송할 수 있게 해줍니다.

**5. "HTTP/3가 UDP를 선택한 이유와 그 장점에 대해 설명해주세요."**
HTTP/3는 기존의 TCP 대신 UDP 기반의 QUIC 프로토콜을 사용합니다. 이는 TCP의 3-way handshake로 인한 연결 설정 시간을 줄이고, 더 많은 HTTP 데이터를 효율적으로 전송하기 위함입니다. UDP를 사용함으로써 연결 설정 시간이 단축되고, 네트워크 전환 시에도 연결이 유지되는 등의 장점이 있습니다.

**6. "프라이빗 캐시와 셰어드 캐시의 차이점과 각각의 활용 사례를 설명해주세요."**
프라이빗 캐시는 웹 브라우저에 저장되는 개인용 캐시로, 특정 사용자의 반복적인 리소스 요청을 최적화하는 데 사용됩니다. 반면 셰어드 캐시는 프록시 서버나 CDN의 에지 서버에 저장되어 여러 사용자가 공유하는 캐시로, 서버 부하를 줄이고 전체적인 응답 시간을 개선하는 데 활용됩니다.

**7. "쿠키와 세션의 동작 방식과 차이점을 설명해주세요."**
쿠키는 클라이언트 측에 저장되는 데이터로, 서버가 Set-Cookie 헤더를 통해 클라이언트에게 저장을 요청합니다. 이후 클라이언트는 Cookie 헤더를 통해 저장된 쿠키를 서버에 전송합니다. 세션은 서버 측에서 관리되며, 세션 ID는 쿠키를 통해 클라이언트에 전달됩니다. 이를 통해 상태가 없는 HTTP 프로토콜에서 상태 유지가 가능해집니다.

**8. "Connection: keep-alive가 HTTP/1.1에서 기본값으로 설정된 이유는 무엇인가요?"**
HTTP/1.1에서는 매 요청마다 새로운 TCP 연결을 생성하는 것이 성능상 비효율적이라는 점을 인식하여 Connection: keep-alive를 기본값으로 설정했습니다. 이를 통해 동일한 서버로의 여러 요청을 하나의 TCP 연결로 처리할 수 있게 되어 연결 설정에 드는 오버헤드를 크게 줄일 수 있습니다.

**9. "쿠키의 Secure와 HttpOnly 플래그가 보안에 어떤 영향을 미치는지 설명해주세요."**
Secure 플래그는 HTTPS 연결에서만 쿠키가 전송되도록 제한하여 중간자 공격을 방지하고, HttpOnly 플래그는 JavaScript를 통한 쿠키 접근을 차단하여 XSS 공격으로부터 쿠키를 보호합니다. 이 두 옵션을 적절히 활용하면 웹 애플리케이션의 보안성을 크게 향상시킬 수 있습니다.

**10. "HTTP/2의 서버 푸시 기능이 웹 성능에 미치는 영향을 설명해주세요."**
HTTP/2의 서버 푸시 기능은 클라이언트가 요청하기 전에 서버가 필요한 리소스를 미리 전송할 수 있게 해줍니다. 예를 들어, HTML 문서를 요청했을 때 해당 페이지에 필요한 CSS, JavaScript 파일들을 클라이언트의 추가 요청 없이 함께 전송할 수 있어 페이지 로딩 시간을 크게 단축할 수 있습니다.

**11. "HTTP/3에서의 연결 설정 과정이 이전 버전과 어떻게 다른지 설명해주세요."**
HTTP/3는 UDP 기반의 QUIC 프로토콜을 사용하여 TCP의 3-way handshake 과정을 줄였습니다. QUIC는 첫 연결 설정 시 필요한 정보를 함께 전송하여 연결 설정과 TLS 협상을 동시에 처리할 수 있어, 초기 연결 설정 시간을 크게 단축시켰습니다. 또한 연결 식별자를 사용하여 네트워크가 변경되어도 연결을 유지할 수 있습니다.
